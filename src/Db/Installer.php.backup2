<?php
declare(strict_types=1);

namespace Bandfront\Db;

use Bandfront\Utils\Debug;

// Set domain for Db
Debug::domain('db');
error_log("[BFP] Installer.php file loaded");

/**
 * Database Installer
 * 
 * Handles database table creation, updates, and schema versioning
 * following WordPress 2025 best practices
 * 
 * @package Bandfront\Db
 * @since 2.0.0
 */
class Installer {
    
    private static string $version = '2.3.1';
    private static string $version_option = 'bfp_db_version';
    
    /**
     * Install/Update database schema
     */
    public static function install(): void {
        error_log("[BFP] Installer::install() method called");
        
        $installed_version = get_option(self::$version_option, '0.0.0');
        
        if (version_compare($installed_version, self::$version, '<')) {
            error_log("Upgrading database from {$installed_version} to " . self::$version);
            
            // Run migrations if needed
            if (version_compare($installed_version, '2.1.0', '<')) {
                self::migrateOldMetaKeys();
            }
            
            if (version_compare($installed_version, '2.2.0', '<')) {
                self::migrateAnalyticsSettings();
            }
            
            if (version_compare($installed_version, '2.3.1', '<')) {
                // Ensure player settings exist with default values
                $global_settings = get_option('bfp_global_settings', []);
                if (!isset($global_settings['_bfp_player_on_cover'])) {
                    $global_settings['_bfp_player_on_cover'] = 1;
                }
                if (!isset($global_settings['_bfp_show_purchasers'])) {
                    $global_settings['_bfp_show_purchasers'] = 1;
                }
                if (!isset($global_settings['_bfp_max_purchasers_display'])) {
                    $global_settings['_bfp_max_purchasers_display'] = 10;
                }
                update_option('bfp_global_settings', $global_settings);
            }
            
            self::createTables();
            self::updateVersion();
            
            // Ensure global settings exist with Config defaults
            $config = new \Bandfront\Core\Config();
            $global_settings = get_option('bfp_global_settings', []);
            if (empty($global_settings)) {
                // Config class will handle defaults
                update_option('bfp_global_settings', []);
            }
        } else {
            error_log('Database already up to date: ' . $installed_version);
        }
    }
    
    /**
     * Create database tables
     */
    private static function createTables(): void {
        global $wpdb;
        
        $charset_collate = $wpdb->get_charset_collate();
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        
        // Player configurations table
        $player_table = $wpdb->prefix . 'bfp_player';
        $player_sql = "CREATE TABLE $player_table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            player_name varchar(250) NOT NULL,
            config longtext,
            playlist longtext,
            version varchar(20) DEFAULT '2.0.0',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY player_name (player_name),
            KEY created_at (created_at),
            KEY version (version)
        ) $charset_collate;";
        
        dbDelta($player_sql);
        
        // Analytics table
        $analytics_table = $wpdb->prefix . 'bfp_analytics';
        $analytics_sql = "CREATE TABLE $analytics_table (
            id bigint(20) NOT NULL AUTO_INCREMENT,
            event_type varchar(50) NOT NULL,
            product_id bigint(20) NOT NULL,
            user_id bigint(20) DEFAULT NULL,
            track_id varchar(255) DEFAULT NULL,
            track_name varchar(255) DEFAULT NULL,
            timestamp datetime DEFAULT CURRENT_TIMESTAMP,
            session_id varchar(128) DEFAULT NULL,
            referrer varchar(255) DEFAULT NULL,
            user_agent varchar(255) DEFAULT NULL,
            PRIMARY KEY (id),
            KEY event_type (event_type),
            KEY product_id (product_id),
            KEY user_id (user_id),
            KEY timestamp (timestamp),
            KEY session_id (session_id)
        ) $charset_collate;";
        
        dbDelta($analytics_sql);
        
        error_log('Tables created/updated successfully');
    }
    
    /**
     * Update database version
     */
    private static function updateVersion(): void {
        update_option(self::$version_option, self::$version);
        error_log('Database version updated to ' . self::$version);
    }
    
    /**
     * Migrate old meta keys to new ones
     */
    private static function migrateOldMetaKeys(): void {
        global $wpdb;
        
        error_log('Migrating old meta keys to new format');
        
        $key_mappings = [
            '_bfp_secure_player' => '_bfp_play_demos',
            '_bfp_file_percent' => '_bfp_demo_duration_percent',
            '_bfp_single_player' => '_bfp_unified_player',
            '_bfp_merge_in_grouped' => '_bfp_group_cart_control',
            '_bfp_own_demos' => '_bfp_use_custom_demos',
            '_bfp_direct_own_demos' => '_bfp_direct_demo_links'
        ];
        
        foreach ($key_mappings as $old_key => $new_key) {
            $count = $wpdb->query($wpdb->prepare(
                "UPDATE {$wpdb->postmeta} 
                 SET meta_key = %s 
                 WHERE meta_key = %s",
                $new_key,
                $old_key
            ));
            
            if ($count > 0) {
                error_log("Migrated {$count} instances of {$old_key} to {$new_key}");
            }
        }
    }
    
    /**
     * Migrate analytics settings from 'ua' to 'internal'
     */
    private static function migrateAnalyticsSettings(): void {
        error_log('Migrating analytics settings');
        
        // Get current global settings
        $global_settings = get_option('bfp_global_settings', []);
        
        // Check if analytics integration is set to 'ua' and update to 'internal'
        if (isset($global_settings['_bfp_analytics_integration']) && $global_settings['_bfp_analytics_integration'] === 'ua') {
            $global_settings['_bfp_analytics_integration'] = 'internal';

            // Get old property and api_secret values
            $old_property = $global_settings['_bfp_analytics_property'] ?? '';
            $old_api_secret = $global_settings['_bfp_analytics_api_secret'] ?? '';
            
            // Set up the new analytics config structure
            $global_settings['_bfp_analytics_config'] = [
                'internal' => [
                    'endpoints' => [
                        'events' => '/wp-json/bandfront-analytics/v1/events',
                        'metrics' => '/wp-json/bandfront-analytics/v1/metrics',
                    ],
                    'api_key' => '',
                ],
                'google' => [
                    'ua' => [
                        'endpoint' => 'http://www.google-analytics.com/collect',
                        'property_id' => $old_property,  // Migrate old UA property
                    ],
                    'ga4' => [
                        'endpoint' => 'https://www.google-analytics.com/mp/collect',
                        'measurement_id' => '',  // G-XXXXXXXXXX format
                        'api_secret' => $old_api_secret,  // Migrate old api_secret
                    ],
                ],
            ];
            
            // Remove old keys as they're now in the config structure
            unset($global_settings['_bfp_analytics_property']);
            unset($global_settings['_bfp_analytics_api_secret']);
            unset($global_settings['_bfp_analytics_endpoints']);
            
            update_option('bfp_global_settings', $global_settings);
            error_log('Analytics settings migrated from ua to internal');
        }
    }
    
    /**
     * Run activation tasks
     */
    public static function activate(): void {
        error_log('[BFP] Plugin activation triggered');
        
        // Set activation timestamp
        update_option('bandfront_player_activated', time());
        
        // Run install/update
        self::install();
        
        // Schedule cron jobs
        if (!wp_next_scheduled('bfp_daily_maintenance')) {
            wp_schedule_event(time(), 'daily', 'bfp_daily_maintenance');
        }
        
        // Clear any cached data
        wp_cache_flush();
        
        error_log('[BFP] Plugin activation completed');
    }
    
    /**
     * Run deactivation tasks
     */
    public static function deactivate(): void {
        error_log('[BFP] Plugin deactivation triggered');
        
        // Clear scheduled events
        wp_clear_scheduled_hook('bfp_daily_maintenance');
        
        // Clear transients
        global $wpdb;
        $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_bfp_%'");
        $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_bfp_%'");
        
        error_log('[BFP] Plugin deactivation completed');
    }
    
    /**
     * Check if we need to migrate from old plugin
     */
    /**
     * Migrate from old plugin structure (alias for checkMigration)
     */
    public static function migrateFromOldStructure(): void {
        self::checkMigration();
    }

    public static function checkMigration(): void {
        global $wpdb;
        
        $old_table = $wpdb->prefix . 'cpmp_player';
        $new_table = $wpdb->prefix . 'bfp_player';
        
        // Check if old table exists and has data
        $old_exists = $wpdb->get_var("SHOW TABLES LIKE '$old_table'") === $old_table;
        $new_exists = $wpdb->get_var("SHOW TABLES LIKE '$new_table'") === $new_table;
        
        if ($old_exists && $new_exists) {
            $old_count = $wpdb->get_var("SELECT COUNT(*) FROM $old_table");
            $new_count = $wpdb->get_var("SELECT COUNT(*) FROM $new_table");
            
            if ($old_count > 0 && $new_count === '0') {
                error_log("Migrating $old_count records from $old_table to $new_table");
                
                $wpdb->query("
                    INSERT INTO $new_table (player_name, config, playlist, version, created_at)
                    SELECT player_name, config, playlist, '1.0.0', NOW()
                    FROM $old_table
                ");
                
                error_log('Migration completed successfully');
            }
        }
    }
    
    /**
     * Uninstall - Clean up database
     */
    public static function uninstall(): void {
        global $wpdb;
        
        // Only drop tables if user confirms data deletion
        if (get_option('bfp_delete_data_on_uninstall', false)) {
            error_log('Starting database cleanup');
            
            // Drop tables
            $wpdb->query("DROP TABLE IF EXISTS {$wpdb->prefix}bfp_analytics");
            $wpdb->query("DROP TABLE IF EXISTS {$wpdb->prefix}bfp_player");
            
            // Clean up old table if it exists
            $wpdb->query("DROP TABLE IF EXISTS {$wpdb->prefix}cpmp_player");
            
            // Delete options
            delete_option('bfp_global_settings');
            delete_option('bfp_addon_player');
            delete_option('bfp_native_addon_skin');
            delete_option(self::$version_option);
            delete_option('bandfront_player_activated');
            
            // Clean up transients
            $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_bfp_%'");
            $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_bfp_%'");
            
            // Clean up postmeta
            $wpdb->query("DELETE FROM {$wpdb->postmeta} WHERE meta_key LIKE '_bfp_%'");
            
            error_log('Database cleanup completed');
        } else {
            error_log('Database cleanup skipped - user data preserved');
        }
    }
    
    /**
     * Get database status for admin
     */
    public static function getStatus(): array {
        global $wpdb;
        
        $status = [
            'version' => get_option(self::$version_option, 'Not installed'),
            'latest_version' => self::$version,
            'tables' => [],
            'options_count' => 0,
            'postmeta_count' => 0,
        ];
        
        // Check tables
        $tables = [
            'bfp_player' => $wpdb->prefix . 'bfp_player',
            'bfp_analytics' => $wpdb->prefix . 'bfp_analytics',
        ];
        
        foreach ($tables as $key => $table_name) {
            $exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'") === $table_name;
            $count = $exists ? $wpdb->get_var("SELECT COUNT(*) FROM $table_name") : 0;
            
            $status['tables'][$key] = [
                'exists' => $exists,
                'count' => (int)$count,
                'name' => $table_name
            ];
        }
        
        // Count options and postmeta
        $status['options_count'] = (int)$wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->options} WHERE option_name LIKE 'bfp_%' OR option_name LIKE '_bfp_%'");
        $status['postmeta_count'] = (int)$wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->postmeta} WHERE meta_key LIKE '_bfp_%'");
        
        return $status;
    }
}
