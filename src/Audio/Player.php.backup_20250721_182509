<?php
declare(strict_types=1);

namespace Bandfront\Audio;

use Bandfront\Core\Config;
use Bandfront\UI\Renderer;
use Bandfront\Storage\FileManager;
use Bandfront\Utils\Debug;

// Set domain for Audio
Debug::domain('audio');

/**
 * Player management functionality for Bandfront Player
 *
 * Handles player state, file management, and coordination between components.
 * Delegates all HTML rendering to Renderer.
 *
 * @package Bandfront\Audio
 * @since 2.0.0
 */
class Player {
    
    private Config $config;
    private Renderer $renderer;
    private Audio $audio;
    private FileManager $fileManager;
    
    private bool $enqueuedResources = false;
    private bool $insertedPlayer = false;
    private bool $insertPlayer = true;
    private array $renderedProducts = [];
    private bool $insertMainPlayer = true;
    private bool $insertAllPlayers = true;
    
    /**
     * Constructor - accepts only needed dependencies
     */
    public function __construct(Config $config, Renderer $renderer, Audio $audio, FileManager $fileManager) {
        $this->config = $config;
        $this->renderer = $renderer;
        $this->audio = $audio;
        $this->fileManager = $fileManager;
    }
    
    /**
     * Generate player HTML
     */
    public function getPlayer(string $audioUrl, array $args = []): string {
        $productId = $args['product_id'] ?? 0;
        $playerControls = $args['player_controls'] ?? '';
        $playerStyle = $args['player_style'] ?? $this->config->getState('_bfp_player_layout');
        $mediaType = $args['media_type'] ?? 'mp3';
        $id = $args['id'] ?? '0';  // Allow string IDs
        $duration = $args['duration'] ?? false;
        $preload = $args['preload'] ?? 'none';
        $volume = $args['volume'] ?? 1;
        $title = $args['title'] ?? '';  // Add title support
        
        // Apply filters
        $preload = apply_filters('bfp_preload', $preload, $audioUrl);
        
        // Generate unique player ID
        $playerId = 'bfp-player-' . $productId . '-' . $id . '-' . uniqid();
        
        // Build player HTML with title
        $playerHtml = '<div class="bfp-player-wrapper ' . esc_attr($playerStyle) . '">';
        $playerHtml .= '<audio id="' . esc_attr($playerId) . '" ';
        $playerHtml .= 'class="bfp-player ' . esc_attr($playerStyle) . '" ';
        $playerHtml .= 'data-product="' . esc_attr($productId) . '" ';
        $playerHtml .= 'data-file-index="' . esc_attr($id) . '" ';
        $playerHtml .= 'preload="' . esc_attr($preload) . '" ';
        $playerHtml .= 'data-volume="' . esc_attr($volume) . '" ';
        
        if ($playerControls) {
            $playerHtml .= 'data-controls="' . esc_attr($playerControls) . '" ';
        }
        
        if ($duration) {
            $playerHtml .= 'data-duration="' . esc_attr($duration) . '" ';
        }
        
        $playerHtml .= '>';
        $playerHtml .= '<source src="' . esc_url($audioUrl) . '" type="audio/' . esc_attr($mediaType) . '" />';
        $playerHtml .= '</audio>';
        $playerHtml .= '</div>'; // Close player wrapper
        
        return apply_filters('bfp_player_html', $playerHtml, $audioUrl, $args);
    }
    
    /**
     * Include main player for a product
     */
    public function includeMainPlayer($product = '', bool $echo = true): string {
        $output = '';
        error_log("[BFP] includeMainPlayer called with product: " . (is_numeric($product) ? $product : (is_object($product) ? get_class($product) : gettype($product))) . ", echo: " . ($echo ? "true" : "false"));

        if (is_admin()) {
            error_log("[BFP] includeMainPlayer: Returning empty - is_admin() is true");
            return $output;
        }

        if (!$this->getInsertPlayer() || !$this->getInsertMainPlayer()) {
            error_log("[BFP] includeMainPlayer: Returning empty - getInsertPlayer: " . ($this->getInsertPlayer() ? "true" : "false") . ", getInsertMainPlayer: " . ($this->getInsertMainPlayer() ? "true" : "false"));
            return $output;
        }
        
        if (is_numeric($product)) {
            $product = wc_get_product($product);
        }
        if (!is_object($product)) {
            $product = wc_get_product();
        }

        if (empty($product)) {
            error_log("[BFP] includeMainPlayer: Returning empty - product is empty");
            return '';
        }

        // Use getState for single value retrieval
        $onCover = $this->config->getState('_bfp_player_on_cover');
        if ($onCover && (is_shop() || is_product_category() || is_product_tag())) {
            // Don't render the regular player on shop pages when on_cover is enabled
            return '';
        }

        $files = $this->fileManager->getProductFilesInternal([
            'product' => $product,
            'first'   => true,
        ]);
        
        if (!empty($files)) {
            $id = $product->get_id();

            // Use smart context instead of _bfp_show_in
            if (!$this->config->smartPlayContext($id)) {
                return $output;
            }
            
            // CONTEXT-AWARE CONTROLS: button on shop, full on product pages
            if (function_exists('is_product') && is_product()) {
                $playerControls = '';  // Empty string means 'all' controls
            } else {
                $playerControls = 'track';  // 'track' means button controls
            }
            
            // Get all player settings using bulk fetch for performance
            $settings = $this->config->getStates([
                '_bfp_preload',
                '_bfp_player_layout',
                '_bfp_player_volume'
            ], $id);
            
            $this->enqueueResources();

            $file = reset($files);
            $index = key($files);
            $duration = $this->audio->getDurationByUrl($file['file']);
            $audioUrl = $this->audio->generateAudioUrl($id, $index, $file);
            
            // Add title if enabled in settings
            $title = apply_filters('bfp_file_name', $file['name'], $id, $index);
            
            $audioTag = apply_filters(
                'bfp_audio_tag',
                $this->getPlayer(
                    $audioUrl,
                    [
                        'product_id'      => $id,
                        'player_controls' => $playerControls,
                        'player_style'    => $settings['_bfp_player_layout'],
                        'media_type'      => $file['media_type'],
                        'id'              => $index,
                        'duration'        => $duration,
                        'preload'         => $settings['_bfp_preload'],
                        'volume'          => $settings['_bfp_player_volume'],
                        'title'           => $title  // Add title to args
                    ]
                ),
                $id,
                $index,
                $audioUrl
            );

            do_action('bfp_before_player_shop_page', $id);

            // Add data attributes for AJAX tracking
            $nonce = wp_create_nonce('bfp_ajax_nonce');
            $output = '<div class="bfp-player-container product-' . esc_attr($file['product']) . '" ';
            $output .= 'data-product="' . esc_attr($id) . '" ';
            $output .= 'data-file-index="' . esc_attr($index) . '" ';
            $output .= 'data-nonce="' . esc_attr($nonce) . '">';
            $output .= $audioTag . '</div>';
            
            if ($echo) {
                print $output; // phpcs:ignore WordPress.Security.EscapeOutput
            }

            do_action('bfp_after_player_shop_page', $id);

            return $output;
        }
        
        return '';
    }
    
    /**
     * Include all players for a product
     */
    public function includeAllPlayers($product = ''): void {
        if (!$this->getInsertPlayer() || !$this->getInsertAllPlayers() || is_admin()) {
            return;
        }
        
        // Get product ID
        $productId = is_object($product) ? $product->get_id() : (int)$product;
        
        // Prevent double rendering for the same product
        if (in_array($productId, $this->renderedProducts)) {
            return;
        }
        $this->renderedProducts[] = $productId;

        if (!is_object($product)) {
            $product = wc_get_product();
        }

        if (empty($product)) {
            return;
        }

        $files = $this->fileManager->getProductFilesInternal([
            'product' => $product,
            'all'     => true,
        ]);
        
        if (!empty($files)) {
            $id = $product->get_id();

            // Use smart context instead of _bfp_show_in
            if (!$this->config->smartPlayContext($id)) {
                return;
            }
            
            // Get all player settings using bulk fetch
            $settings = $this->config->getStates([
                '_bfp_preload',
                '_bfp_player_layout',
                '_bfp_player_volume',
                '_bfp_loop',
                '_bfp_group_cart_control',
                '_bfp_unified_player'
            ], $id);
            
            $this->enqueueResources();
            
            // CONTEXT-AWARE CONTROLS
            if (function_exists('is_product') && is_product()) {
                $playerControls = 'all';
            } else {
                $playerControls = 'button';
            }
            
            $counter = count($files);

            do_action('bfp_before_players_product_page', $id);
            
            if (1 == $counter) {
                // Single file - render directly
                $playerControls = ('button' == $playerControls) ? 'track' : '';
                $file = reset($files);
                $index = key($files);
                $duration = $this->audio->getDurationByUrl($file['file']);
                $audioUrl = $this->audio->generateAudioUrl($id, $index, $file);

                // Create audio tag with proper data attributes
                $audioTag = '<audio id="bfp-audio-' . $id . '" class="bfp-player" src="' . esc_url($audioUrl) . '" ';
                $audioTag .= 'data-product="' . esc_attr($id) . '" ';
                $audioTag .= 'data-file-index="' . esc_attr($index) . '" ';
                $audioTag .= '></audio>';
                
                $title = esc_html(apply_filters('bfp_file_name', $file['name'], $id, $index));
                $mergeGroupedClass = ($settings['_bfp_group_cart_control']) ? 'group_cart_control_products' : '';
                
                // Generate nonce for AJAX requests
                $nonce = wp_create_nonce('bfp_ajax_nonce');
                
                // Output player with proper data attributes for AJAX tracking
                if (!$this->compactMode) {
                    // Show title only if not in compact mode
                    print '<div class="bfp-track-title">' . $title . '</div>';
                }
                print '<div class="bfp-player-container ' . esc_attr($mergeGroupedClass) . ' product-' . esc_attr($file['product']) . '" ';
                print 'data-product="' . esc_attr($id) . '" ';
                print 'data-file-index="' . esc_attr($index) . '" ';
                print 'data-nonce="' . esc_attr($nonce) . '" ';
                print ($settings['_bfp_loop'] ? 'data-loop="1" ' : '') . '>';
                print $audioTag . '</div>';
                print '<div style="clear:both;"></div>';
                
            } elseif ($counter > 1) {
                // Multiple files - prepare data and use renderer
                $preparedFiles = $this->prepareFilesForRenderer($files, $id, $settings);
                
                // Add player_controls to settings for renderer
                $settings['player_controls'] = $playerControls;
                $settings['single_player'] = $settings['_bfp_unified_player'] ?? 0;
                
                if ($this->compactMode) {
                    error_log("[BFP] includeAllPlayers in compact mode for product: " . $id);
                    // In compact mode, render single player with track data
                    $firstFile = reset($preparedFiles);
                    if (!empty($firstFile['audio_tag'])) {
                        // Prepare track list as JSON
                        $trackList = [];
                        foreach ($files as $index => $file) {
                            if (!empty($file['file'])) {
                                $audioUrl = $this->audio->generateAudioUrl($id, $index, $file);
                                
                                if ($audioUrl) {
                                    $trackList[] = [
                                        'url' => $audioUrl,
                                        'title' => $file['name'] ?? 'Track ' . (intval($index) + 1),
                                        'index' => $index
                                    ];
                                }
                            }
                        }
                        
                        $tracksJson = esc_attr(json_encode($trackList));
                        print '<div class="bfp-player-container bfp-compact" data-product-id="' . esc_attr($id) . '" data-tracks=\'' . $tracksJson . '\' data-current-track="0">';
                        print $firstFile['audio_tag'];
                        print '</div>';
                    }

                } else {
                    print $this->renderer->renderPlayerTable($preparedFiles, $id, $settings);
                } // phpcs:ignore WordPress.Security.EscapeOutput
            }
            
            // Check purchase status via Bootstrap
            $purchased = false;
            $bootstrap = \Bandfront\Core\Bootstrap::getInstance();
            $woocommerce = $bootstrap ? $bootstrap->getComponent('woocommerce') : null;
            if ($woocommerce) {
                $purchased = $woocommerce->isUserProduct($id);
            }
            
            $message = $this->config->getState('_bfp_demo_message');
            if (!empty($message) && false === $purchased) {
                print '<div class="bfp-message">' . wp_kses_post(__($message, 'bandfront-player')) . '</div>'; // phpcs:ignore WordPress.WP.I18n.NonSingularStringLiteralText
            }
            
            do_action('bfp_after_players_product_page', $id);
        }
    }
    
    /**
     * Prepare files for renderer with pre-generated audio tags
     */
    private function prepareFilesForRenderer(array $files, int $productId, array $settings): array {
        $preparedFiles = [];
        
        foreach ($files as $index => $file) {
            $duration = $this->audio->getDurationByUrl($file['file']);
            $audioUrl = $this->audio->generateAudioUrl($productId, $index, $file);
            
            // Add title if enabled in settings
            $title = apply_filters('bfp_file_name', $file['name'], $productId, $index);
            
            $audioTag = apply_filters(
                'bfp_audio_tag',
                $this->getPlayer(
                    $audioUrl,
                    [
                        'product_id'      => $productId,
                        'player_style'    => $settings['_bfp_player_layout'],
                        'player_controls' => ($settings['player_controls'] != 'all') ? 'track' : '',
                        'media_type'      => $file['media_type'],
                        'duration'        => $duration,
                        'preload'         => $settings['_bfp_preload'],
                        'volume'          => $settings['_bfp_player_volume'],
                        'id'              => $index,
                        'title'           => $title  // Add title to args
                    ]
                ),
                $productId,
                $index,
                $audioUrl
            );
            
            $file['audio_tag'] = $audioTag;
            $file['duration'] = $duration;
            $preparedFiles[$index] = $file;
        }
        
        return $preparedFiles;
    }
    
    /**
     * Get product files - public interface
     */
    public function getProductFiles(int $productId): array {
        return $this->fileManager->getProductFiles($productId);
    }
    
    /**
     * Enqueue player resources
     */
    public function enqueueResources(): void {
        if ($this->enqueuedResources) {
            return;
        }
        
        $audioEngine = $this->config->getState('_bfp_audio_engine');
        
        // Enqueue base styles
        wp_enqueue_style(
            'bfp-style', 
            plugin_dir_url(dirname(dirname(__FILE__))) . 'assets/css/style.css', 
            [], 
            BFP_VERSION
        );
        
        // Enqueue jQuery
        wp_enqueue_script('jquery');
        
        if ($audioEngine === 'wavesurfer') {
            // Check if WaveSurfer is available locally
            $wavesurferPath = plugin_dir_path(dirname(dirname(__FILE__))) . 'vendor/wavesurfer/wavesurfer.min.js';
            
            if (file_exists($wavesurferPath)) {
                // Enqueue local WaveSurfer.js
                wp_enqueue_script(
                    'wavesurfer',
                    plugin_dir_url(dirname(dirname(__FILE__))) . 'vendor/wavesurfer/wavesurfer.min.js',
                    [],
                    '7.9.9',
                    true
                );
            } else {
                // Fallback to CDN if local file doesn't exist
                wp_enqueue_script(
                    'wavesurfer',
                    'https://unpkg.com/wavesurfer.js@7/dist/wavesurfer.min.js',
                    [],
                    '7.9.9',
                    true
                );
            }
            
            // Enqueue WaveSurfer integration
            wp_enqueue_script(
                'bfp-wavesurfer-integration',
                plugin_dir_url(dirname(dirname(__FILE__))) . 'assets/js/wavesurfer.js',
                ['jquery', 'wavesurfer'],
                BFP_VERSION,
                true
            );
        } elseif ($audioEngine === 'html5') {
            // Pure HTML5 - no additional libraries needed
        } else {
            // MediaElement.js
            wp_enqueue_style('wp-mediaelement');
            wp_enqueue_script('wp-mediaelement');
            
        }

        // Load skin CSS for all engines
        $selectedSkin = $this->config->getState('_bfp_player_layout');
        
        // Validate skin selection
        if (!in_array($selectedSkin, ['dark', 'light', 'custom'])) {
            $selectedSkin = 'dark';
        }
        
        // Map audio engine values to folder names
        $engineFolder = $audioEngine;
        if ($audioEngine === 'mediaelement' || !$audioEngine) {
            $engineFolder = 'mediaelement';
        }
        
        // Enqueue selected skin CSS file for the specific engine
        wp_enqueue_style(
            'bfp-skin-' . $selectedSkin,
            plugin_dir_url(dirname(dirname(__FILE__))) . 'assets/css/skins/' . $engineFolder . '/' . $selectedSkin . '.css',
            [],
            BFP_VERSION
        );
        
        // Enqueue main engine script
        wp_enqueue_script(
            'bfp-engine',
            plugin_dir_url(dirname(dirname(__FILE__))) . 'assets/js/engine.js',
            ['jquery'],
            BFP_VERSION,
            true
        );
        
        // Localize script with settings
        $settingsKeys = [
            '_bfp_allow_concurrent_audio',
            '_bfp_ios_controls',
            '_bfp_fade_out',
            '_bfp_player_on_cover',
            '_bfp_enable_visualizations',
            '_bfp_player_layout'
        ];
        
        $settings = $this->config->getStates($settingsKeys);
        
        $jsSettings = [
            'ajaxurl' => admin_url('admin-ajax.php'),
            'audio_engine' => $audioEngine,
            'bfp_allow_concurrent_audio' => $settings['_bfp_allow_concurrent_audio'],
            'ios_controls' => $settings['_bfp_ios_controls'],
            'fade_out' => $settings['_bfp_fade_out'],
            'on_cover' => $settings['_bfp_player_on_cover'],
            'visualizations' => $settings['_bfp_enable_visualizations'],
            'player_skin' => $settings['_bfp_player_layout']
        ];
        
        wp_localize_script('bfp-engine', 'bfp_global_settings', $jsSettings);
        
        $this->enqueuedResources = true;
    }
    
    /**
     * Filter content to add players
     */
    public function filterContent(string $content): string {
        if (!$this->insertPlayer || is_admin()) {
            return $content;
        }
        
        global $post;
        if (!$post || !in_array($post->post_type, $this->config->getPostTypes())) {
            return $content;
        }
        
        $productId = $post->ID;
        
        // Check if player should be shown
        if (!$this->config->getState('_bfp_enable_player', true, $productId)) {
            return $content;
        }
        
        // Use smart context
        if (!$this->config->smartPlayContext($productId)) {
            return $content;
        }
        
        // Get player HTML
        ob_start();
        $this->includeAllPlayers($post->ID);
        $playerHtml = ob_get_clean();
        
        if (!empty($playerHtml)) {
            $content = $playerHtml . $content;
        }
        
        return $content;
    }
    
    /**
     * Handle player shortcode
     */
    public function shortcode(array $atts = []): string {
        $atts = shortcode_atts([
            'id' => 0,
            'style' => '',
            'controls' => '',
            'autoplay' => false,
            'loop' => false,
        ], $atts);
        
        $productId = absint($atts['id']);
        if (!$productId) {
            return '';
        }
        
        ob_start();
        $this->includeAllPlayers($productId);
        return ob_get_clean();
    }
    
    /**
     * Render player (simplified interface)
     */
    public function render(int $productId): string {
        ob_start();
        $this->includeAllPlayers($productId);
        return ob_get_clean();
    }
    
    /**
     * Render compact player
     */
        public function renderCompact(int $productId): string {
        error_log("[BFP] renderCompact called for product: " . $productId);
        ob_start();
        
        // Temporarily set a compact mode flag
        $this->compactMode = true;
        
        // Get the product object
        $product = wc_get_product($productId);
        if ($product) {
            $this->includeAllPlayers($product);
        }
        
        // Reset compact mode
        $this->compactMode = false;
        
        return ob_get_clean();
    }
    
    /**
     * Render player shortcode
     */
    public function renderShortcode(array $atts): string {
        return $this->shortcode($atts);
    }
    
    /**
     * Enqueue assets (alias for enqueueScripts)
     */
    public function enqueueAssets(): void {
        $this->enqueueResources();
    }
    
    // Getter/setter methods
    public function getEnqueuedResources(): bool {
        return $this->enqueuedResources;
    }
    
    public function setEnqueuedResources(bool $value): void {
        $this->enqueuedResources = $value;
    }
    
    public function getInsertPlayer(): bool {
        return $this->insertPlayer;
    }
    
    public function setInsertPlayer(bool $value): void {
        $this->insertPlayer = $value;
    }
    
    public function getInsertedPlayer(): bool {
        return $this->insertedPlayer;
    }
    
    public function setInsertedPlayer(bool $value): void {
        $this->insertedPlayer = $value;
    }
    
    public function getInsertMainPlayer(): bool {
        return $this->insertMainPlayer;
    }
    
    public function setInsertMainPlayer(bool $value): void {
        $this->insertMainPlayer = $value;
    }
    
    public function getInsertAllPlayers(): bool {
        return $this->insertAllPlayers;
    }
    
    public function setInsertAllPlayers(bool $value): void {
        $this->insertAllPlayers = $value;
    }
}